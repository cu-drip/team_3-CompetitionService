openapi: 3.0.4
info:
  title: CompetitionService API
  version: 1.0.0
  description: API для управления спортивными соревнованиями

security:
  - BearerAuth: [ ]

paths:
  # ==========================================
  # Tournament Management
  # ==========================================

  /api/v1/tournaments:
    get:
      summary: Получить список турниров
      tags:
        - Tournament Management
      responses:
        '200':
          description: Список турниров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Создать новый турнир (только для админов)
      tags:
        - Tournament Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentDTO'
      responses:
        '201':
          description: Турнир создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tournaments/{id}:
    get:
      summary: Получить турнир по ID
      tags:
        - Tournament Management
      parameters:
        - $ref: '#/components/parameters/TournamentId'
      responses:
        '200':
          description: Турнир найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Турнир не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновить турнир полностью (только для админов)
      tags:
        - Tournament Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TournamentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentDTO'
      responses:
        '200':
          description: Турнир обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Турнир не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Частично обновить турнир (только для админов)
      tags:
        - Tournament Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TournamentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentDTO'
      responses:
        '200':
          description: Турнир обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Турнир не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удалить турнир (только для админов)
      tags:
        - Tournament Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TournamentId'
      responses:
        '204':
          description: Удаление успешно
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Турнир не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tournaments/{id}/participants:
    get:
      summary: Получить всех участников турнира
      tags:
        - Tournament Management
      parameters:
        - $ref: '#/components/parameters/TournamentId'
      responses:
        '200':
          description: Список участников турнира
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Турнир не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tournaments/{id}/register:
    post:
      summary: Зарегистрировать участника или команду
      tags:
        - Tournament Management
      parameters:
        - $ref: '#/components/parameters/TournamentId'
        - name: participantId
          in: query
          required: true
          description: ID участника (user_id или team_id)
          schema:
            type: string
            format: uuid
        - name: participantType
          in: query
          required: true
          description: Тип участника
          schema:
            type: string
            enum: [ solo, team ]
      responses:
        '200':
          description: Регистрация успешна
          content:
            text/plain:
              schema:
                type: string
                example: "Registered successfully"
        '400':
          description: Ошибка валидации
          content:
            text/plain:
              schema:
                type: string
                example: "Error message"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Турнир заполнен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Отменить регистрацию участника или команды
      tags:
        - Tournament Management
      parameters:
        - $ref: '#/components/parameters/TournamentId'
        - name: participantId
          in: query
          required: true
          description: ID участника (user_id или team_id)
          schema:
            type: string
            format: uuid
        - name: participantType
          in: query
          required: true
          description: Тип участника
          schema:
            type: string
            enum: [ solo, team ]
      responses:
        '200':
          description: Регистрация отменена
          content:
            text/plain:
              schema:
                type: string
                example: "Unregistered successfully"
        '400':
          description: Ошибка валидации
          content:
            text/plain:
              schema:
                type: string
                example: "Error message"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Регистрация не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/tournaments/{id}/notify:
    post:
      summary: Отправить уведомления участникам или командам (только для админов)
      tags:
        - Tournament Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TournamentId'
      responses:
        '200':
          description: Уведомления отправлены
          content:
            text/plain:
              schema:
                type: string
                example: "Notifications sent"
        '400':
          description: Ошибка валидации
          content:
            text/plain:
              schema:
                type: string
                example: "Error message"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Турнир не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==========================================
  # Team Management
  # ==========================================

  /api/v1/teams:
    get:
      summary: Получить список команд
      tags:
        - Team Management
      responses:
        '200':
          description: Список команд
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDTO'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Создать команду (только для админов)
      tags:
        - Team Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamDTO'
      responses:
        '201':
          description: Команда создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDTO'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/teams/{id}:
    get:
      summary: Получить команду по ID
      tags:
        - Team Management
      parameters:
        - $ref: '#/components/parameters/TeamId'
      responses:
        '200':
          description: Команда найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDTO'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновить команду целиком (только для админов)
      tags:
        - Team Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TeamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamDTO'
      responses:
        '200':
          description: Команда обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDTO'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Обновить команду частично (только для админов)
      tags:
        - Team Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TeamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamDTO'
      responses:
        '200':
          description: Команда обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDTO'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удалить команду (только для админов)
      tags:
        - Team Management
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/TeamId'
      responses:
        '204':
          description: Удаление успешно
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав (требуется роль администратора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/teams/{id}/participants:
    get:
      summary: Получить всех участников команды
      tags:
        - Team Management
      parameters:
        - $ref: '#/components/parameters/TeamId'
      responses:
        '200':
          description: Список участников команды
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/teams/{teamId}/participants/{userId}:
    post:
      summary: Добавить нового участника в команду
      tags:
        - Team Management
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Идентификатор команды
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Идентификатор пользователя
      responses:
        '200':
          description: Участник добавлен в команду
          content:
            text/plain:
              schema:
                type: string
                example: "Successfully added a new team member!"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда или пользователь не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удалить участника из команды
      tags:
        - Team Management
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Идентификатор команды
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Идентификатор пользователя
      responses:
        '200':
          description: Участник удален из команды
          content:
            text/plain:
              schema:
                type: string
                example: "Successfully removed member from the team."
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Команда или пользователь не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен для аутентификации. Формат - "Bearer <token>"

  parameters:
    TournamentId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Идентификатор турнира

    TeamId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Идентификатор команды

    UserId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Идентификатор юзера

  schemas:
    # ==========================================
    # User Schemas
    # ==========================================

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Иван"
        surname:
          type: string
          example: "Иванов"
        patronymic:
          type: string
          nullable: true
          example: "Иванович"
        phone_number:
          type: string
          example: "+7 (900) 123-45-67"
        email:
          type: string
          format: email
          nullable: true
          example: "ivan@example.com"
        is_admin:
          type: boolean
          example: false
        date_of_birth:
          type: string
          format: date
          nullable: true
          example: "1990-01-01"
        age:
          type: integer
          nullable: true
          example: 33
        sex:
          type: string
          enum: [ male, female, other ]
          nullable: true
          example: "male"
        weight:
          type: number
          format: float
          nullable: true
          example: 75.5
        height:
          type: number
          format: float
          nullable: true
          example: 180.0
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        bio:
          type: string
          nullable: true
          example: "Краткая информация о себе"
        avatar_url:
          type: string
          nullable: true
          example: "https://example.com/avatar.jpg"

    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Иван"
        surname:
          type: string
          example: "Иванов"
        patronymic:
          type: string
          nullable: true
          example: "Иванович"
        phone_number:
          type: string
          example: "+7 (900) 123-45-67"
        email:
          type: string
          format: email
          nullable: true
          example: "ivan@example.com"
        date_of_birth:
          type: string
          format: date
          nullable: true
          example: "1990-01-01"
        sex:
          type: string
          enum: [ male, female, other ]
          nullable: true
          example: "male"
        weight:
          type: number
          format: float
          nullable: true
          example: 75.5
        height:
          type: number
          format: float
          nullable: true
          example: 180.0
        bio:
          type: string
          nullable: true
          example: "Краткая информация о себе"
        avatar_url:
          type: string
          nullable: true
          example: "https://example.com/avatar.jpg"


    # ==========================================
    # Tournament Schemas
    # ==========================================

    Tournament:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Чемпионат города по футболу"
        description:
          type: string
          example: "Ежегодный турнир среди любительских команд"
        sport:
          type: string
          enum: [ football, boxing, basketball, chess, tennis, jiu_jitsu ]
          example: "football"
        type_tournament:
          type: string
          enum: [ solo, team ]
          example: "team"
        type_group:
          type: string
          enum: [ olympic, swiss, round_robin ]
          example: "olympic"
        matches_number:
          type: integer
          example: 16
        start_time:
          type: string
          format: date-time
          example: "2023-06-15T14:00:00Z"
        created_at:
          type: string
          format: date-time
          example: "2023-05-01T10:00:00Z"
        entry_cost:
          type: number
          format: decimal
          example: 1000.00
        max_participants:
          type: integer
          example: 32
        registration_deadline:
          type: string
          format: date-time
          example: "2023-06-10T23:59:59Z"
        place:
          type: string
          example: "Стадион Динамо"
        organizer_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        status:
          type: string
          enum: [ upcoming, ongoing, finished ]
          example: "upcoming"

    TournamentDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Чемпионат города по футболу"
        description:
          type: string
          example: "Ежегодный турнир среди любительских команд"
        sport:
          type: string
          enum: [ football, boxing, basketball, chess, tennis, jiu_jitsu ]
          example: "football"
        type_tournament:
          type: string
          enum: [ solo, team ]
          example: "team"
        type_group:
          type: string
          enum: [ olympic, swiss, round_robin ]
          example: "olympic"
        matches_number:
          type: integer
          example: 16
        start_time:
          type: string
          format: date-time
          example: "2023-06-15T14:00:00Z"
        entry_cost:
          type: number
          format: decimal
          example: 1000.00
        max_participants:
          type: integer
          example: 32
        registration_deadline:
          type: string
          format: date-time
          example: "2023-07-15T14:00:00Z"
        place:
          type: string
          example: "Cybersport Arena"

    # ==========================================
    # Team Schemas
    # ==========================================

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Спартак"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        avatar:
          type: string
          example: "https://example.com/team-avatar.jpg"
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        mmr:
          type: number
          format: double
          nullable: true
          example: 1500.0
        creator_id:
          type: string
          format: uuid
          description: ID создателя команды
          example: "123e4567-e89b-12d3-a456-426614174000"
    TeamDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Спартак"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        avatar:
          type: string
          example: "https://example.com/team-avatar.jpg"
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        mmr:
          type: number
          format: double
          nullable: true
          example: 1500.0
        creator_id:
          type: string
          format: uuid
          description: ID создателя команды
          example: "123e4567-e89b-12d3-a456-426614174000"

    # ==========================================
    # Error Response
    # ==========================================

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Ошибка аутентификации"
        code:
          type: integer
          example: 401
        details:
          type: object
          nullable: true
          description: Дополнительная информация об ошибке
          example: { "field": "password", "reason": "invalid_credentials" }

servers:
  - url: https://api.tournament.local
    description: Local Dev Server
